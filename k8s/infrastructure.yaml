# Infrastructure services for ServiceNow MCP
# Consul for service discovery
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: consul
    app.kubernetes.io/component: service-discovery
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app.kubernetes.io/component: service-discovery
    spec:
      serviceAccountName: mcp-service-account
      containers:
      - name: consul
        image: hashicorp/consul:1.16
        ports:
        - containerPort: 8500
          name: http
        - containerPort: 8600
          name: dns
        - containerPort: 8300
          name: server
        env:
        - name: CONSUL_BIND_INTERFACE
          value: "eth0"
        - name: CONSUL_CLIENT_INTERFACE
          value: "eth0"
        command:
        - consul
        - agent
        - -server
        - -bootstrap-expect=3
        - -data-dir=/consul/data
        - -ui
        - -bind=0.0.0.0
        - -client=0.0.0.0
        - -retry-join=consul-0.consul.servicenow-mcp.svc.cluster.local
        - -retry-join=consul-1.consul.servicenow-mcp.svc.cluster.local
        - -retry-join=consul-2.consul.servicenow-mcp.svc.cluster.local
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: consul-data
          mountPath: /consul/data
        livenessProbe:
          httpGet:
            path: /v1/status/leader
            port: 8500
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /v1/status/leader
            port: 8500
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: consul-data
        persistentVolumeClaim:
          claimName: consul-data-pvc
---
# Consul Service
apiVersion: v1
kind: Service
metadata:
  name: consul
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: consul
    app.kubernetes.io/component: service-discovery
spec:
  type: ClusterIP
  ports:
  - port: 8500
    targetPort: 8500
    protocol: TCP
    name: http
  - port: 8600
    targetPort: 8600
    protocol: UDP
    name: dns
  selector:
    app.kubernetes.io/name: consul
---
# Consul Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: consul
    app.kubernetes.io/component: service-discovery
spec:
  clusterIP: None
  ports:
  - port: 8500
    targetPort: 8500
    name: http
  - port: 8300
    targetPort: 8300
    name: server
  selector:
    app.kubernetes.io/name: consul
---
# Consul PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: consul-data-pvc
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: consul
    app.kubernetes.io/component: service-discovery
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd  # Adjust based on your storage class
---
# Redis for caching and memory
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      serviceAccountName: mcp-service-account
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "800mb"
        - --maxmemory-policy
        - "allkeys-lru"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: redis
---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
# Neo4j for graph memory
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neo4j
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: neo4j
    app.kubernetes.io/component: graph-database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: neo4j
  template:
    metadata:
      labels:
        app.kubernetes.io/name: neo4j
        app.kubernetes.io/component: graph-database
    spec:
      serviceAccountName: mcp-service-account
      containers:
      - name: neo4j
        image: neo4j:5-community
        ports:
        - containerPort: 7474
          name: http
        - containerPort: 7687
          name: bolt
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: neo4j-credentials
              key: NEO4J_AUTH
        - name: NEO4J_PLUGINS
          value: '["apoc"]'
        - name: NEO4J_apoc_export_file_enabled
          value: "true"
        - name: NEO4J_apoc_import_file_enabled
          value: "true"
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "1G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "2G"
        - name: NEO4J_dbms_memory_pagecache_size
          value: "1G"
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        volumeMounts:
        - name: neo4j-data
          mountPath: /data
        - name: neo4j-logs
          mountPath: /logs
        livenessProbe:
          exec:
            command:
            - cypher-shell
            - -u
            - neo4j
            - -p
            - $(NEO4J_PASSWORD)
            - "RETURN 1"
          initialDelaySeconds: 60
          periodSeconds: 60
        readinessProbe:
          httpGet:
            path: /
            port: 7474
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: neo4j-data
        persistentVolumeClaim:
          claimName: neo4j-data-pvc
      - name: neo4j-logs
        emptyDir: {}
---
# Neo4j Service
apiVersion: v1
kind: Service
metadata:
  name: neo4j
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: neo4j
    app.kubernetes.io/component: graph-database
spec:
  type: ClusterIP
  ports:
  - port: 7474
    targetPort: 7474
    protocol: TCP
    name: http
  - port: 7687
    targetPort: 7687
    protocol: TCP
    name: bolt
  selector:
    app.kubernetes.io/name: neo4j
---
# Neo4j PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: neo4j-data-pvc
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: neo4j
    app.kubernetes.io/component: graph-database
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd  # Adjust based on your storage class
---
# Load Balancer (Nginx)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-lb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: nginx-lb
    app.kubernetes.io/component: load-balancer
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-lb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-lb
        app.kubernetes.io/component: load-balancer
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: mcp-service-account
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-config
          mountPath: /etc/nginx/proxy.conf
          subPath: proxy.conf
        - name: nginx-logs
          mountPath: /var/log/nginx
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-logs
        emptyDir: {}
---
# Nginx Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-lb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: nginx-lb
    app.kubernetes.io/component: load-balancer
spec:
  type: LoadBalancer  # Change to ClusterIP if using an Ingress
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: nginx-lb