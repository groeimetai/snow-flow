# ServiceNow Deployment MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: deployment-mcp
    app.kubernetes.io/instance: deployment-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: deployment-mcp
      app.kubernetes.io/instance: deployment-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: deployment-mcp
        app.kubernetes.io/instance: deployment-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: deployment-mcp
        image: servicenow-mcp/deployment-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3001
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "deployment-mcp"
        - name: SERVER_PORT
          value: "3001"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - deployment-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Deployment MCP Service
apiVersion: v1
kind: Service
metadata:
  name: deployment-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: deployment-mcp
    app.kubernetes.io/instance: deployment-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: deployment-mcp
    app.kubernetes.io/instance: deployment-mcp
---
# ServiceNow Deployment MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: deployment-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: deployment-mcp
    app.kubernetes.io/instance: deployment-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: deployment-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Deployment MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: deployment-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: deployment-mcp
    app.kubernetes.io/instance: deployment-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: deployment-mcp
      app.kubernetes.io/instance: deployment-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Deployment MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: deployment-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: deployment-mcp
    app.kubernetes.io/instance: deployment-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: deployment-mcp
      app.kubernetes.io/instance: deployment-mcp
---
# ServiceNow Flow Composer MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flow-composer-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: flow-composer-mcp
    app.kubernetes.io/instance: flow-composer-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: flow-composer-mcp
      app.kubernetes.io/instance: flow-composer-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flow-composer-mcp
        app.kubernetes.io/instance: flow-composer-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3002"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: flow-composer-mcp
        image: servicenow-mcp/flow-composer-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3002
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "flow-composer-mcp"
        - name: SERVER_PORT
          value: "3002"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - flow-composer-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Flow Composer MCP Service
apiVersion: v1
kind: Service
metadata:
  name: flow-composer-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: flow-composer-mcp
    app.kubernetes.io/instance: flow-composer-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3002
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: flow-composer-mcp
    app.kubernetes.io/instance: flow-composer-mcp
---
# ServiceNow Flow Composer MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: flow-composer-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: flow-composer-mcp
    app.kubernetes.io/instance: flow-composer-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flow-composer-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Flow Composer MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: flow-composer-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: flow-composer-mcp
    app.kubernetes.io/instance: flow-composer-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: flow-composer-mcp
      app.kubernetes.io/instance: flow-composer-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Flow Composer MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: flow-composer-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: flow-composer-mcp
    app.kubernetes.io/instance: flow-composer-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flow-composer-mcp
      app.kubernetes.io/instance: flow-composer-mcp
---
# ServiceNow Intelligent MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: intelligent-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: intelligent-mcp
    app.kubernetes.io/instance: intelligent-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: intelligent-mcp
      app.kubernetes.io/instance: intelligent-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: intelligent-mcp
        app.kubernetes.io/instance: intelligent-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3003"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: intelligent-mcp
        image: servicenow-mcp/intelligent-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3003
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "intelligent-mcp"
        - name: SERVER_PORT
          value: "3003"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - intelligent-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Intelligent MCP Service
apiVersion: v1
kind: Service
metadata:
  name: intelligent-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: intelligent-mcp
    app.kubernetes.io/instance: intelligent-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3003
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: intelligent-mcp
    app.kubernetes.io/instance: intelligent-mcp
---
# ServiceNow Intelligent MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: intelligent-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: intelligent-mcp
    app.kubernetes.io/instance: intelligent-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: intelligent-mcp
  minReplicas: 3
  maxReplicas: 9
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Intelligent MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: intelligent-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: intelligent-mcp
    app.kubernetes.io/instance: intelligent-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: intelligent-mcp
      app.kubernetes.io/instance: intelligent-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Intelligent MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: intelligent-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: intelligent-mcp
    app.kubernetes.io/instance: intelligent-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: intelligent-mcp
      app.kubernetes.io/instance: intelligent-mcp
---
# ServiceNow Update Set MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: update-set-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: update-set-mcp
    app.kubernetes.io/instance: update-set-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: update-set-mcp
      app.kubernetes.io/instance: update-set-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: update-set-mcp
        app.kubernetes.io/instance: update-set-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3004"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: update-set-mcp
        image: servicenow-mcp/update-set-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3004
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "update-set-mcp"
        - name: SERVER_PORT
          value: "3004"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - update-set-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Update Set MCP Service
apiVersion: v1
kind: Service
metadata:
  name: update-set-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: update-set-mcp
    app.kubernetes.io/instance: update-set-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3004
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: update-set-mcp
    app.kubernetes.io/instance: update-set-mcp
---
# ServiceNow Update Set MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: update-set-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: update-set-mcp
    app.kubernetes.io/instance: update-set-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: update-set-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Update Set MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: update-set-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: update-set-mcp
    app.kubernetes.io/instance: update-set-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: update-set-mcp
      app.kubernetes.io/instance: update-set-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Update Set MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: update-set-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: update-set-mcp
    app.kubernetes.io/instance: update-set-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: update-set-mcp
      app.kubernetes.io/instance: update-set-mcp
---
# ServiceNow Graph Memory MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graph-memory-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: graph-memory-mcp
    app.kubernetes.io/instance: graph-memory-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: graph-memory-mcp
      app.kubernetes.io/instance: graph-memory-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: graph-memory-mcp
        app.kubernetes.io/instance: graph-memory-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3005"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: graph-memory-mcp
        image: servicenow-mcp/graph-memory-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3005
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "graph-memory-mcp"
        - name: SERVER_PORT
          value: "3005"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - graph-memory-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Graph Memory MCP Service
apiVersion: v1
kind: Service
metadata:
  name: graph-memory-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: graph-memory-mcp
    app.kubernetes.io/instance: graph-memory-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3005
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: graph-memory-mcp
    app.kubernetes.io/instance: graph-memory-mcp
---
# ServiceNow Graph Memory MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: graph-memory-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: graph-memory-mcp
    app.kubernetes.io/instance: graph-memory-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: graph-memory-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Graph Memory MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: graph-memory-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: graph-memory-mcp
    app.kubernetes.io/instance: graph-memory-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: graph-memory-mcp
      app.kubernetes.io/instance: graph-memory-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Graph Memory MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: graph-memory-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: graph-memory-mcp
    app.kubernetes.io/instance: graph-memory-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: graph-memory-mcp
      app.kubernetes.io/instance: graph-memory-mcp
---
# ServiceNow Operations MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: operations-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: operations-mcp
    app.kubernetes.io/instance: operations-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: operations-mcp
      app.kubernetes.io/instance: operations-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: operations-mcp
        app.kubernetes.io/instance: operations-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3006"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: operations-mcp
        image: servicenow-mcp/operations-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3006
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "operations-mcp"
        - name: SERVER_PORT
          value: "3006"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - operations-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Operations MCP Service
apiVersion: v1
kind: Service
metadata:
  name: operations-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: operations-mcp
    app.kubernetes.io/instance: operations-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3006
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: operations-mcp
    app.kubernetes.io/instance: operations-mcp
---
# ServiceNow Operations MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: operations-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: operations-mcp
    app.kubernetes.io/instance: operations-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: operations-mcp
  minReplicas: 3
  maxReplicas: 9
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Operations MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: operations-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: operations-mcp
    app.kubernetes.io/instance: operations-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: operations-mcp
      app.kubernetes.io/instance: operations-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Operations MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: operations-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: operations-mcp
    app.kubernetes.io/instance: operations-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: operations-mcp
      app.kubernetes.io/instance: operations-mcp
---
# ServiceNow Platform Development MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-development-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: platform-development-mcp
    app.kubernetes.io/instance: platform-development-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: platform-development-mcp
      app.kubernetes.io/instance: platform-development-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: platform-development-mcp
        app.kubernetes.io/instance: platform-development-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3007"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: platform-development-mcp
        image: servicenow-mcp/platform-development-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3007
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "platform-development-mcp"
        - name: SERVER_PORT
          value: "3007"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - platform-development-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Platform Development MCP Service
apiVersion: v1
kind: Service
metadata:
  name: platform-development-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: platform-development-mcp
    app.kubernetes.io/instance: platform-development-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3007
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: platform-development-mcp
    app.kubernetes.io/instance: platform-development-mcp
---
# ServiceNow Platform Development MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: platform-development-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: platform-development-mcp
    app.kubernetes.io/instance: platform-development-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: platform-development-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Platform Development MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: platform-development-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: platform-development-mcp
    app.kubernetes.io/instance: platform-development-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: platform-development-mcp
      app.kubernetes.io/instance: platform-development-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Platform Development MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: platform-development-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: platform-development-mcp
    app.kubernetes.io/instance: platform-development-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: platform-development-mcp
      app.kubernetes.io/instance: platform-development-mcp
---
# ServiceNow Integration MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: integration-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: integration-mcp
    app.kubernetes.io/instance: integration-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: integration-mcp
      app.kubernetes.io/instance: integration-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: integration-mcp
        app.kubernetes.io/instance: integration-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3008"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: integration-mcp
        image: servicenow-mcp/integration-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3008
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "integration-mcp"
        - name: SERVER_PORT
          value: "3008"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - integration-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Integration MCP Service
apiVersion: v1
kind: Service
metadata:
  name: integration-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: integration-mcp
    app.kubernetes.io/instance: integration-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3008
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: integration-mcp
    app.kubernetes.io/instance: integration-mcp
---
# ServiceNow Integration MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: integration-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: integration-mcp
    app.kubernetes.io/instance: integration-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: integration-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Integration MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: integration-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: integration-mcp
    app.kubernetes.io/instance: integration-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: integration-mcp
      app.kubernetes.io/instance: integration-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Integration MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: integration-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: integration-mcp
    app.kubernetes.io/instance: integration-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: integration-mcp
      app.kubernetes.io/instance: integration-mcp
---
# ServiceNow Automation MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: automation-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: automation-mcp
    app.kubernetes.io/instance: automation-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: automation-mcp
      app.kubernetes.io/instance: automation-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: automation-mcp
        app.kubernetes.io/instance: automation-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3009"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: automation-mcp
        image: servicenow-mcp/automation-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3009
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "automation-mcp"
        - name: SERVER_PORT
          value: "3009"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - automation-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Automation MCP Service
apiVersion: v1
kind: Service
metadata:
  name: automation-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: automation-mcp
    app.kubernetes.io/instance: automation-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3009
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: automation-mcp
    app.kubernetes.io/instance: automation-mcp
---
# ServiceNow Automation MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: automation-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: automation-mcp
    app.kubernetes.io/instance: automation-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: automation-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Automation MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: automation-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: automation-mcp
    app.kubernetes.io/instance: automation-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: automation-mcp
      app.kubernetes.io/instance: automation-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Automation MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: automation-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: automation-mcp
    app.kubernetes.io/instance: automation-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: automation-mcp
      app.kubernetes.io/instance: automation-mcp
---
# ServiceNow Security & Compliance MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-compliance-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: security-compliance-mcp
    app.kubernetes.io/instance: security-compliance-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: security-compliance-mcp
      app.kubernetes.io/instance: security-compliance-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: security-compliance-mcp
        app.kubernetes.io/instance: security-compliance-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3010"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: security-compliance-mcp
        image: servicenow-mcp/security-compliance-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3010
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "security-compliance-mcp"
        - name: SERVER_PORT
          value: "3010"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - security-compliance-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Security & Compliance MCP Service
apiVersion: v1
kind: Service
metadata:
  name: security-compliance-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: security-compliance-mcp
    app.kubernetes.io/instance: security-compliance-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3010
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: security-compliance-mcp
    app.kubernetes.io/instance: security-compliance-mcp
---
# ServiceNow Security & Compliance MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: security-compliance-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: security-compliance-mcp
    app.kubernetes.io/instance: security-compliance-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: security-compliance-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Security & Compliance MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: security-compliance-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: security-compliance-mcp
    app.kubernetes.io/instance: security-compliance-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: security-compliance-mcp
      app.kubernetes.io/instance: security-compliance-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Security & Compliance MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: security-compliance-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: security-compliance-mcp
    app.kubernetes.io/instance: security-compliance-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: security-compliance-mcp
      app.kubernetes.io/instance: security-compliance-mcp
---
# ServiceNow Reporting & Analytics MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reporting-analytics-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: reporting-analytics-mcp
    app.kubernetes.io/instance: reporting-analytics-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: reporting-analytics-mcp
      app.kubernetes.io/instance: reporting-analytics-mcp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: reporting-analytics-mcp
        app.kubernetes.io/instance: reporting-analytics-mcp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: mcp-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3011"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: reporting-analytics-mcp
        image: servicenow-mcp/reporting-analytics-mcp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3011
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "reporting-analytics-mcp"
        - name: SERVER_PORT
          value: "3011"
        - name: SERVICE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mcp-config
        - secretRef:
            name: servicenow-credentials
        - secretRef:
            name: neo4j-credentials
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            memory: "384Mi"
            cpu: "375m"
          limits:
            memory: "768Mi"
            cpu: "750m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - reporting-analytics-mcp
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
---
# ServiceNow Reporting & Analytics MCP Service
apiVersion: v1
kind: Service
metadata:
  name: reporting-analytics-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: reporting-analytics-mcp
    app.kubernetes.io/instance: reporting-analytics-mcp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mcp-service
    app.kubernetes.io/part-of: servicenow-mcp
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - port: 3011
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: reporting-analytics-mcp
    app.kubernetes.io/instance: reporting-analytics-mcp
---
# ServiceNow Reporting & Analytics MCP Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reporting-analytics-mcp-hpa
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: reporting-analytics-mcp
    app.kubernetes.io/instance: reporting-analytics-mcp
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reporting-analytics-mcp
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
---
# ServiceNow Reporting & Analytics MCP ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: reporting-analytics-mcp
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: reporting-analytics-mcp
    app.kubernetes.io/instance: reporting-analytics-mcp
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: reporting-analytics-mcp
      app.kubernetes.io/instance: reporting-analytics-mcp
  endpoints:
  - port: http
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
---
# ServiceNow Reporting & Analytics MCP Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reporting-analytics-mcp-pdb
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: reporting-analytics-mcp
    app.kubernetes.io/instance: reporting-analytics-mcp
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: reporting-analytics-mcp
      app.kubernetes.io/instance: reporting-analytics-mcp
---