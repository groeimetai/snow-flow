# ConfigMap for ServiceNow MCP services
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-config
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: servicenow-mcp
    app.kubernetes.io/component: configuration
data:
  # Service configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  
  # Service discovery
  CONSUL_URL: "http://consul:8500"
  
  # Database connections
  NEO4J_URI: "bolt://neo4j:7687"
  NEO4J_DATABASE: "neo4j"
  REDIS_URL: "redis://redis:6379"
  
  # Performance settings
  CONNECTION_POOL_SIZE: "10"
  REQUEST_TIMEOUT: "30000"
  RETRY_ATTEMPTS: "3"
  CACHE_ENABLED: "true"
  CACHE_TTL: "300"
  
  # Memory settings
  MEMORY_PROVIDER: "redis"
  MEMORY_MAX_SIZE: "1000"
  MEMORY_TTL: "86400"
  
  # Health check settings
  HEALTH_CHECK_INTERVAL: "30s"
  HEALTH_CHECK_TIMEOUT: "10s"
  HEALTH_CHECK_RETRIES: "3"

---
# Secret for ServiceNow credentials (to be created separately with actual values)
apiVersion: v1
kind: Secret
metadata:
  name: servicenow-credentials
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: servicenow-mcp
    app.kubernetes.io/component: credentials
type: Opaque
stringData:
  SERVICENOW_INSTANCE_URL: "https://your-instance.service-now.com"
  SERVICENOW_CLIENT_ID: "your-client-id"
  SERVICENOW_CLIENT_SECRET: "your-client-secret"
  SERVICENOW_USERNAME: "your-username"
  SERVICENOW_PASSWORD: "your-password"

---
# Secret for Neo4j credentials
apiVersion: v1
kind: Secret
metadata:
  name: neo4j-credentials
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: servicenow-mcp
    app.kubernetes.io/component: database-credentials
type: Opaque
stringData:
  NEO4J_USERNAME: "neo4j"
  NEO4J_PASSWORD: "your-neo4j-password"

---
# Secret for monitoring credentials
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-credentials
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: servicenow-mcp
    app.kubernetes.io/component: monitoring-credentials
type: Opaque
stringData:
  GRAFANA_ADMIN_USER: "admin"
  GRAFANA_ADMIN_PASSWORD: "your-grafana-password"
  PROMETHEUS_USER: "prometheus"
  PROMETHEUS_PASSWORD: "your-prometheus-password"

---
# ConfigMap for nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: servicenow-mcp
  labels:
    app.kubernetes.io/name: servicenow-mcp
    app.kubernetes.io/component: load-balancer-config
data:
  nginx.conf: |
    worker_processes auto;
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log info;
        
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        
        upstream deployment-mcp {
            server deployment-mcp:3001 max_fails=3 fail_timeout=30s;
        }
        upstream flow-composer-mcp {
            server flow-composer-mcp:3002 max_fails=3 fail_timeout=30s;
        }
        upstream intelligent-mcp {
            server intelligent-mcp:3003 max_fails=3 fail_timeout=30s;
        }
        upstream update-set-mcp {
            server update-set-mcp:3004 max_fails=3 fail_timeout=30s;
        }
        upstream graph-memory-mcp {
            server graph-memory-mcp:3005 max_fails=3 fail_timeout=30s;
        }
        upstream operations-mcp {
            server operations-mcp:3006 max_fails=3 fail_timeout=30s;
        }
        upstream platform-development-mcp {
            server platform-development-mcp:3007 max_fails=3 fail_timeout=30s;
        }
        upstream integration-mcp {
            server integration-mcp:3008 max_fails=3 fail_timeout=30s;
        }
        upstream automation-mcp {
            server automation-mcp:3009 max_fails=3 fail_timeout=30s;
        }
        upstream security-compliance-mcp {
            server security-compliance-mcp:3010 max_fails=3 fail_timeout=30s;
        }
        upstream reporting-analytics-mcp {
            server reporting-analytics-mcp:3011 max_fails=3 fail_timeout=30s;
        }
        
        server {
            listen 80;
            
            location /health {
                return 200 '{"status":"healthy","load_balancer":"nginx"}';
                add_header Content-Type application/json;
            }
            
            location /deployment-mcp/ {
                proxy_pass http://deployment-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /flow-composer-mcp/ {
                proxy_pass http://flow-composer-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /intelligent-mcp/ {
                proxy_pass http://intelligent-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /update-set-mcp/ {
                proxy_pass http://update-set-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /graph-memory-mcp/ {
                proxy_pass http://graph-memory-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /operations-mcp/ {
                proxy_pass http://operations-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /platform-development-mcp/ {
                proxy_pass http://platform-development-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /integration-mcp/ {
                proxy_pass http://integration-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /automation-mcp/ {
                proxy_pass http://automation-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /security-compliance-mcp/ {
                proxy_pass http://security-compliance-mcp/;
                include /etc/nginx/proxy.conf;
            }
            location /reporting-analytics-mcp/ {
                proxy_pass http://reporting-analytics-mcp/;
                include /etc/nginx/proxy.conf;
            }
            
            location / {
                return 200 '{"message":"ServiceNow MCP Load Balancer","version":"1.0.0","status":"running"}';
                add_header Content-Type application/json;
            }
        }
    }
  
  proxy.conf: |
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_cache_bypass $http_upgrade;
    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;