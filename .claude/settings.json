{
  "enabledMcpjsonServers": [
    "snow-flow",
    "servicenow-deployment",
    "servicenow-operations",
    "servicenow-automation",
    "servicenow-platform-development",
    "servicenow-integration",
    "servicenow-system-properties",
    "servicenow-update-set",
    "servicenow-development-assistant",
    "servicenow-local-development",
    "servicenow-security-compliance",
    "servicenow-reporting-analytics",
    "servicenow-machine-learning",
    "servicenow-knowledge-catalog",
    "servicenow-change-virtualagent-pa",
    "servicenow-flow-workspace-mobile",
    "servicenow-cmdb-event-hr-csm-devops",
    "servicenow-advanced-features"
  ],
  "permissions": {
    "allow": [
      "Bash(npx snow-flow *)",
      "Bash(snow-flow *)",
      "Bash(./snow-flow *)",
      "Bash(npm run *)",
      "Bash(npm install *)",
      "Bash(npm update *)",
      "Bash(npm test *)",
      "Bash(npm run lint)",
      "Bash(npm run build)",
      "Bash(npm run dev)",
      "Bash(npm start)",
      "Bash(yarn *)",
      "Bash(pnpm *)",
      "Bash(git status)",
      "Bash(git diff *)",
      "Bash(git log *)",
      "Bash(git add *)",
      "Bash(git commit *)",
      "Bash(git push *)",
      "Bash(git pull *)",
      "Bash(git branch *)",
      "Bash(git checkout *)",
      "Bash(git merge *)",
      "Bash(git config *)",
      "Bash(git remote *)",
      "Bash(gh *)",
      "Bash(node *)",
      "Bash(npm *)",
      "Bash(npx *)",
      "Bash(which *)",
      "Bash(pwd)",
      "Bash(ls *)",
      "Bash(cd *)",
      "Bash(mkdir *)",
      "Bash(rm *)",
      "Bash(cp *)",
      "Bash(mv *)",
      "Bash(find *)",
      "Bash(grep *)",
      "Bash(cat *)",
      "Bash(head *)",
      "Bash(tail *)",
      "Bash(less *)",
      "Bash(more *)",
      "Bash(curl *)",
      "Bash(wget *)",
      "Bash(ping *)",
      "Bash(telnet *)",
      "Bash(nc *)",
      "Bash(netstat *)",
      "Bash(jq *)",
      "Bash(awk *)",
      "Bash(sed *)",
      "Bash(sort *)",
      "Bash(uniq *)",
      "Bash(wc *)",
      "Bash(ps *)",
      "Bash(top)",
      "Bash(htop)",
      "Bash(lsof *)",
      "Bash(df *)",
      "Bash(du *)",
      "Bash(free *)",
      "Bash(uptime)",
      "Bash(env)",
      "Bash(export *)",
      "Bash(echo *)",
      "Bash(printenv *)",
      "Bash(docker *)",
      "Bash(docker-compose *)",
      "Bash(sn *)",
      "Bash(snc *)",
      "Read(*)",
      "Write(*)",
      "Edit(*)",
      "MultiEdit(*)",
      "Glob(*)",
      "Grep(*)",
      "LS(*)",
      "NotebookEdit(*)",
      "NotebookRead(*)",
      "WebFetch(*)",
      "WebSearch(*)",
      "TodoRead",
      "TodoWrite",
      "Task(*)",
      "ListMcpResourcesTool",
      "ReadMcpResourceTool",
      "mcp__servicenow-*",
      "mcp__snow-flow__*"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(sudo rm *)",
      "Bash(sudo *)"
    ]
  },
  "autoCompactThreshold": 0.65,
  "compactMode": "aggressive",
  "contextPreservation": {
    "preserveMCPState": true,
    "preserveToolResults": true,
    "preserveRecentContext": 5000,
    "prioritizeServiceNowOperations": true
  },
  "hooks": {
    "PreCompact": [
      {
        "matcher": "manual",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'INPUT=$(cat); CUSTOM=$(echo \"$INPUT\" | jq -r \".custom_instructions // \\\"\\\"\"); echo \"üîÑ PreCompact Guidance:\"; echo \"üìã IMPORTANT: Review CLAUDE.md in project root for:\"; echo \"   ‚Ä¢ 18+ MCP servers and snow_pull_artifact for widget debugging\"; echo \"   ‚Ä¢ Swarm coordination strategies (hierarchical, mesh, adaptive)\"; echo \"   ‚Ä¢ SPARC methodology workflows with batchtools optimization\"; echo \"   ‚Ä¢ Critical concurrent execution rules (GOLDEN RULE: 1 MESSAGE = ALL OPERATIONS)\"; if [ -n \"$CUSTOM\" ]; then echo \"üéØ Custom compact instructions: $CUSTOM\"; fi; echo \"‚úÖ Ready for compact operation\"'"
          }
        ]
      },
      {
        "matcher": "auto",
        "threshold": 0.65,
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'echo \"‚ö° EARLY Auto-Compact triggered at 65% context usage\"; echo \"üîî Compacting BEFORE API calls fail\"; echo \"üìã Preserving critical Snow-Flow context:\"; echo \"   ‚Ä¢ Active MCP connections and tool state\"; echo \"   ‚Ä¢ Recent ServiceNow operations and results\"; echo \"   ‚Ä¢ Current artifact sync status\"; echo \"   ‚Ä¢ Authentication and session data\"; echo \"‚ö†Ô∏è This prevents mid-operation failures\"; echo \"‚úÖ Safe compact at 65% threshold\"'"
          }
        ]
      }
    ]
  },
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "0",
    "BASH_MAX_TIMEOUT_MS": "0",
    "BASH_MAX_OUTPUT_LENGTH": "500000",
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "true",
    "MAX_THINKING_TOKENS": "50000",
    "MCP_TIMEOUT": "0",
    "MCP_TOOL_TIMEOUT": "0",
    "DISABLE_COST_WARNINGS": "1",
    "DISABLE_NON_ESSENTIAL_MODEL_CALLS": "0",
    "CLAUDE_CODE_MAX_OUTPUT_TOKENS": "32000",
    "CLAUDE_CODE_TIMEOUT": "0",
    "CLAUDE_CODE_SESSION_TIMEOUT": "0",
    "CLAUDE_CODE_EXECUTION_TIMEOUT": "0",
    "CLAUDE_CODE_EARLY_COMPACT": "true",
    "CLAUDE_CODE_COMPACT_THRESHOLD": "0.65",
    "CLAUDE_CODE_PRESERVE_MCP_STATE": "true",
    "CLAUDE_CODE_CONTEXT_WINDOW_BUFFER": "35",
    "SNOW_FLOW_DEBUG": "false",
    "SNOW_FLOW_LOG_LEVEL": "info",
    "MCP_DEBUG": "false",
    "NODE_ENV": "development"
  },
  "cleanupPeriodDays": 90,
  "includeCoAuthoredBy": true
}