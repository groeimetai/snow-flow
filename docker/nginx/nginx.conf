# Dynamic nginx configuration with Consul Template integration
# This configuration will be dynamically updated by consul-template

worker_processes auto;
worker_cpu_affinity auto;

error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # Custom log format for MCP services
    log_format mcp_access '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'service="$upstream_addr" response_time=$request_time';

    access_log /var/log/nginx/access.log main;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/atom+xml image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=mcp_limit:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Upstream health check
    upstream_conf_cache_timeout 60s;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;

    # Health check for load balancer itself
    server {
        listen 8080;
        location /nginx-health {
            access_log off;
            return 200 "nginx is healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main load balancer configuration
    server {
        listen 80;
        listen 443 ssl http2;
        
        # SSL certificate (will be mounted or generated)
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        server_name mcp-services.local _;

        # Rate limiting
        limit_req zone=mcp_limit burst=20 nodelay;
        limit_conn conn_limit 100;

        # Global health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","services":"all","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Metrics endpoint for monitoring
        location /nginx_status {
            stub_status;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Dynamic upstream configuration (populated by consul-template)
        {{range services}}{{if .Tags | contains "mcp-server"}}
        # Upstream for {{.Name}}
        upstream {{.Name}}_backend {
            least_conn;
            {{range service .Name}}
            server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=30s weight=1;
            {{end}}
            keepalive 32;
        }
        {{end}}{{end}}

        # Service routing based on path prefixes
        {{range services}}{{if .Tags | contains "mcp-server"}}
        location /{{.Name}}/ {
            access_log /var/log/nginx/{{.Name}}.log mcp_access;
            
            proxy_pass http://{{.Name}}_backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Health check
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
        }
        {{end}}{{end}}

        # Direct service access (for development/debugging)
        {{range services}}{{if .Tags | contains "mcp-server"}}
        location ~ ^/direct/{{.Name}}/(.*)$ {
            access_log /var/log/nginx/{{.Name}}_direct.log mcp_access;
            
            proxy_pass http://{{.Name}}_backend/$1;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        {{end}}{{end}}

        # Fallback for root path
        location / {
            return 200 '{
                "message": "ServiceNow MCP Load Balancer",
                "version": "1.0.0",
                "services": [
                    {{range $i, $service := services}}{{if .Tags | contains "mcp-server"}}{{if $i}},{{end}}
                    {
                        "name": "{{.Name}}",
                        "path": "/{{.Name}}/",
                        "direct_path": "/direct/{{.Name}}/",
                        "instances": {{service .Name | len}},
                        "health": "/{{.Name}}/health"
                    }{{end}}{{end}}
                ],
                "timestamp": "$time_iso8601"
            }';
            add_header Content-Type application/json;
        }

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 '{"error":"Not Found","message":"Service not found","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        location = /50x.html {
            return 500 '{"error":"Server Error","message":"Service temporarily unavailable","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
}