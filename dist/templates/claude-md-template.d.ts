export declare const CLAUDE_MD_TEMPLATE = "# Snow-Flow ServiceNow Development Framework\n\n## \uD83D\uDEA8 ABSOLUTE RULES - NO EXCEPTIONS\n\n### \uD83D\uDD34 CRITICAL: Widget Debugging MUST Use Local Sync!\n\n**When user reports ANY widget issue, ALWAYS use:**\n```\nsnow_pull_artifact({ sys_id: 'widget_sys_id' })\n```\n\n**NEVER use snow_query_table for widgets!** It will hit token limits and you can't use native tools.\n\n**Common scenarios requiring snow_pull_artifact:**\n- \"Widget skips questions\" \u2192 snow_pull_artifact\n- \"Form doesn't submit\" \u2192 snow_pull_artifact  \n- \"Data not displaying\" \u2192 snow_pull_artifact\n- \"Button doesn't work\" \u2192 snow_pull_artifact\n- \"Debug this widget\" \u2192 snow_pull_artifact\n- \"Fix widget issue\" \u2192 snow_pull_artifact\n- Widget script > 1000 chars \u2192 snow_pull_artifact\n\n### Rule #1: NO MOCK DATA - EVERYTHING REAL & COMPLETE\n**FORBIDDEN:** Mock data, placeholders, TODOs, stub implementations, test values, simulations, \"this would normally...\", partial implementations.\n**REQUIRED:** Complete, production-ready, fully functional code. Take time to implement EVERYTHING properly. Real integrations, comprehensive error handling, full validation.\n\n### Rule #2: ES5 ONLY - ServiceNow Rhino Engine\n**NEVER USE:** const/let, arrow functions =>, template literals `${}`, destructuring, for...of, default parameters, classes\n**ALWAYS USE:** var, function(){}, string concatenation +, traditional for loops, typeof checks\n\n### Rule #3: VERIFY FIRST - Never Assume\nTest before claiming broken. Check resources exist. Validate configurations. Evidence-based fixes only.\n\n## \uD83D\uDCCB MCP SERVERS & TOOLS (18 Servers, 200+ Tools)\n\n### 1. **servicenow-local-development** \uD83D\uDD27 Widget/Artifact Sync [USE THIS FOR WIDGETS!]\n```\nsnow_pull_artifact - Pull ANY artifact to local files (ALWAYS use for widgets!)\nsnow_push_artifact - Push local changes back to ServiceNow  \nsnow_cleanup_artifacts - Clean local artifact cache\nsnow_get_sync_status - Check artifact sync status\nsnow_list_local_artifacts - List all pulled artifacts\n```\n**\u26A0\uFE0F CRITICAL: For ANY widget work, use snow_pull_artifact FIRST, not snow_query_table!**\n\n### 2. **servicenow-deployment** \uD83D\uDE80 Complete Deployment System\n```\nsnow_deploy - Create NEW artifacts (widgets, flows, scripts, pages)\nsnow_update - UPDATE existing artifacts directly\nsnow_validate_deployment - Validate before deploy\nsnow_rollback_deployment - Rollback failed deployments\nsnow_preview_widget - Preview widget rendering\nsnow_widget_test - Test widget functionality\nsnow_deployment_history - View deployment history\nsnow_check_widget_coherence - Validate HTML/Client/Server communication\n```\n\n### 3. **servicenow-operations** \uD83D\uDCCA Core Operations\n```\nsnow_query_table - Universal table query (NOT for widgets - use snow_pull_artifact!)\nsnow_query_incidents - Query and analyze incidents\nsnow_analyze_incident - AI-powered incident analysis\nsnow_auto_resolve_incident - Automated resolution\nsnow_cmdb_search - Configuration database search\nsnow_user_lookup - Find users and groups\nsnow_operational_metrics - Performance metrics\nsnow_knowledge_search - Search knowledge base\nsnow_catalog_item_manager - Manage service catalog\n```\n\n### 4. **servicenow-automation** \u2699\uFE0F Scripts & Automation\n```\nsnow_execute_background_script - Run ES5 scripts (autoConfirm available)\nsnow_execute_script_with_output - Execute with output capture\nsnow_execute_script_sync - Synchronous execution\nsnow_get_script_output - Retrieve script results\nsnow_schedule_job - Create scheduled jobs\nsnow_create_event - Trigger system events\nsnow_get_logs - Access system logs\nsnow_test_rest_connection - Test REST endpoints\nsnow_trace_execution - Performance tracing\n```\n\n### 5. **servicenow-platform-development** \uD83C\uDFD7\uFE0F Development Artifacts\n```\nsnow_create_ui_page - Create UI pages\nsnow_create_script_include - Reusable scripts\nsnow_create_business_rule - Business rules\nsnow_create_client_script - Client-side scripts\nsnow_create_ui_policy - UI policies\nsnow_create_ui_action - UI actions\nsnow_create_acl - Access controls\nsnow_create_ui_macro - UI macros\n```\n\n### 6. **servicenow-integration** \uD83D\uDD0C Integrations\n```\nsnow_create_rest_message - REST integrations\nsnow_create_soap_message - SOAP integrations\nsnow_create_transform_map - Data transformation\nsnow_create_import_set - Import management\nsnow_test_web_service - Test services\nsnow_configure_email - Email configuration\nsnow_create_data_source - Data sources\n```\n\n### 7. **servicenow-system-properties** \u2699\uFE0F Properties\n```\nsnow_property_get - Get property value\nsnow_property_set - Set property value\nsnow_property_list - List by pattern\nsnow_property_bulk_update - Bulk operations\nsnow_property_export/import - Export/Import JSON\nsnow_property_validate - Validate properties\n```\n\n### 8. **servicenow-update-set** \uD83D\uDCE6 Change Management\n```\nsnow_update_set_create - Create update set\nsnow_update_set_switch - Switch active set\nsnow_update_set_complete - Mark complete\nsnow_update_set_export - Export as XML\nsnow_update_set_preview - Preview changes\nsnow_ensure_active_update_set - Auto-create if needed\n```\n\n### 9. **servicenow-development-assistant** \uD83E\uDD16 AI Assistant\n```\nsnow_find_artifact - Find any artifact by name/type\nsnow_edit_artifact - Edit existing artifacts\nsnow_analyze_artifact - Analyze dependencies\nsnow_comprehensive_search - Deep search all tables\nsnow_analyze_requirements - Requirement analysis\nsnow_generate_code - Pattern-based generation\nsnow_optimize_script - Performance optimization\n```\n\n### 10. **servicenow-security-compliance** \uD83D\uDEE1\uFE0F Security\n```\nsnow_create_security_policy - Security policies\nsnow_audit_compliance - SOX/GDPR/HIPAA audit\nsnow_scan_vulnerabilities - Vulnerability scan\nsnow_assess_risk - Risk assessment\nsnow_review_access_control - ACL review\nsnow_encrypt_field - Field encryption\nsnow_audit_trail_analysis - Audit analysis\n```\n\n### 11. **servicenow-reporting-analytics** \uD83D\uDCC8 Reporting\n```\nsnow_create_report - Create reports\nsnow_create_dashboard - Build dashboards\nsnow_define_kpi - Define KPIs\nsnow_schedule_report - Schedule delivery\nsnow_analyze_data_quality - Data quality\nsnow_create_pa_widget - Performance analytics\n```\n\n### 12. **servicenow-machine-learning** \uD83E\uDDE0 AI/ML\n```\nml_train_incident_classifier - Train LSTM classifier\nml_predict_change_risk - Risk prediction\nml_detect_anomalies - Anomaly detection\nml_forecast_incidents - Time series forecast\nml_cluster_similar - Similarity clustering\nml_performance_analytics - Native PA ML\n```\n\n### 13. **servicenow-change-virtualagent-pa** \uD83D\uDD04 Change & Virtual Agent\n```\nsnow_create_change_request - Change requests\nsnow_assess_change_risk - Risk assessment\nsnow_create_nlu_model - NLU models\nsnow_train_virtual_agent - Train VA\nsnow_configure_conversation - VA conversations\nsnow_analyze_pa_trends - Performance trends\n```\n\n### 14. **servicenow-cmdb-event-hr-csm-devops** \uD83C\uDFE2 Enterprise\n```\nsnow_manage_ci - Configuration items\nsnow_correlate_events - Event correlation\nsnow_manage_hr_case - HR cases\nsnow_csm_project - Customer projects\nsnow_devops_pipeline - CI/CD pipelines\nsnow_manage_cmdb_relationships - CI relationships\n```\n\n### 15. **servicenow-knowledge-catalog** \uD83D\uDCDA Knowledge & Catalog (v3.6.10 Corrected!)\n```\nsnow_create_knowledge_article - KB articles\nsnow_create_catalog_item - Catalog items\nsnow_create_catalog_variable - Variable sets\nsnow_create_catalog_ui_policy - CORRECTED: Creates in 2 tables (conditions as string, actions as records)\nsnow_order_catalog_item - Order catalog items\nsnow_discover_catalogs - Discover available catalogs\n```\n**\u2705 Corrected UI Policy (v3.6.10):** Conditions stored as query string in catalog_conditions field. Actions created in catalog_ui_policy_action table. Based on actual ServiceNow structure!\n\n### 16. **servicenow-flow-workspace-mobile** \uD83D\uDCF1 Modern UX + UI Builder\n```\n# Flow Designer Tools\nsnow_list_flows - List Flow Designer flows\nsnow_execute_flow - Execute flows programmatically  \nsnow_get_flow_execution_status - Monitor flow status\nsnow_get_flow_execution_history - Flow execution history\nsnow_get_flow_details - Flow configuration details\nsnow_import_flow_from_xml - Import flows from XML\n\n# Agent Workspace Tools  \nsnow_create_workspace - Create agent workspace configurations\nsnow_create_workspace_tab - Add custom workspace tabs\nsnow_create_contextual_panel - Add contextual side panels\nsnow_discover_workspaces - Find all workspace configurations\n\n# Mobile App Tools\nsnow_configure_mobile_app - Configure mobile applications\nsnow_send_push_notification - Send push notifications  \nsnow_configure_offline_sync - Setup offline synchronization\n\n# \uD83C\uDD95 COMPLETE UI BUILDER INTEGRATION (15 NEW TOOLS!)\n# Page Management (sys_ux_page)\nsnow_create_uib_page - Create UI Builder pages with routing\nsnow_update_uib_page - Update page configuration\nsnow_delete_uib_page - Delete pages with dependency validation\nsnow_discover_uib_pages - Find all UI Builder pages\n\n# Component Library (sys_ux_lib_*)  \nsnow_create_uib_component - Create custom UI components\nsnow_update_uib_component - Update component source & schema\nsnow_discover_uib_components - Browse component library\nsnow_clone_uib_component - Clone & modify existing components\n\n# Data Integration (sys_ux_data_broker)\nsnow_create_uib_data_broker - Connect ServiceNow data sources\nsnow_configure_uib_data_broker - Update queries & caching\n\n# Layout Management (sys_ux_page_element)\nsnow_add_uib_page_element - Add components to pages\nsnow_update_uib_page_element - Update component properties\nsnow_remove_uib_page_element - Remove elements with validation\n\n# Advanced UI Builder Features\nsnow_create_uib_page_registry - Configure URL routing\nsnow_discover_uib_routes - Find all page routes\nsnow_create_uib_client_script - Add client-side scripts\nsnow_create_uib_client_state - Manage page state  \nsnow_create_uib_event - Create custom events\nsnow_analyze_uib_page_performance - Performance analysis\nsnow_validate_uib_page_structure - Structure validation\nsnow_discover_uib_page_usage - Usage analytics\n```\n\n### 17. **servicenow-advanced-features** \uD83C\uDFAF Advanced\n```\nsnow_performance_optimization - Optimize instance\nsnow_batch_operations - Bulk processing\nsnow_instance_scan - Health check\nsnow_dependency_analysis - Dependencies\nsnow_code_search - Search all code\n```\n\n### 18. **snow-flow** \uD83C\uDF9B\uFE0F Orchestration\n```\nswarm_init - Initialize agent swarms\nagent_spawn - Create specialized agents\ntask_orchestrate - Complex task coordination\nmemory_search - Search persistent memory\nneural_train - Train neural networks\n```\n\n## \uD83D\uDD04 Critical Workflows\n\n### Widget Debugging (ALWAYS use Local Sync!)\n```javascript\n// \u2705 CORRECT - Local sync for debugging\nawait snow_pull_artifact({ sys_id: 'widget_sys_id' });\n// Edit with native tools (search, multi-file, etc.)\nawait snow_push_artifact({ sys_id: 'widget_sys_id' });\n\n// \u274C WRONG - Token limit explosion\nawait snow_query_table({ table: 'sp_widget', query: 'sys_id=...' });\n```\n\n### Verification Pattern\n```javascript\n// Always verify with REAL data, not placeholders\nawait snow_execute_script_with_output({\n  script: `\n    var gr = new GlideRecord('incident');\n    gr.addQuery('active', true);\n    gr.query();\n    gs.info('Found: ' + gr.getRowCount() + ' active incidents');\n    \n    // Test actual property\n    var prop = gs.getProperty('instance_name');\n    gs.info('Instance: ' + prop);\n  `\n});\n```\n\n### Complete Widget Creation (NO PLACEHOLDERS)\n```javascript\nawait snow_deploy({\n  type: 'widget',\n  config: {\n    name: 'my_widget',\n    title: 'Production Widget',\n    template: '<div ng-repeat=\"item in data.items\">{{item.name}}</div>',\n    script: `\n      (function() {\n        data.items = [];\n        var gr = new GlideRecord('incident');\n        gr.addQuery('active', true);\n        gr.setLimit(10);\n        gr.query();\n        while (gr.next()) {\n          data.items.push({\n            name: gr.getDisplayValue('number'),\n            description: gr.getDisplayValue('short_description')\n          });\n        }\n      })();\n    `,\n    client_script: `\n      function($scope) {\n        var c = this;\n        c.refresh = function() {\n          c.server.get().then(function(r) {\n            console.log('Refreshed');\n          });\n        };\n      }\n    `\n  }\n});\n```\n\n### Catalog UI Policy (v3.6.10 Corrected)\n```javascript\nawait snow_create_catalog_ui_policy({\n  cat_item: 'catalog_item_sys_id',\n  short_description: 'Dynamic Field Control',\n  // Conditions converted to ServiceNow query string format\n  conditions: [\n    {\n      catalog_variable: 'user_type',  // Can use name or sys_id\n      operation: 'is',  // or 'is not', 'contains', 'is empty', etc.\n      value: 'employee',\n      and_or: 'AND'  // Connect with AND or OR\n    },\n    {\n      catalog_variable: 'department',\n      operation: 'is not empty',\n      value: ''\n    }\n  ],\n  // Actions still create separate records\n  actions: [\n    {\n      catalog_variable: 'manager_approval',\n      visible: true,\n      mandatory: true\n    },\n    {\n      catalog_variable: 'cost_center',\n      mandatory: true\n    }\n  ]\n});\n// Creates policy with conditions as query string in catalog_conditions field\n// Actions created as separate records in catalog_ui_policy_action table\n```\n\n## \u26A1 Command Reference\n\n### Core Commands\n- `snow-flow init` - Initialize project with this CLAUDE.md\n- `snow-flow auth login` - Authenticate with ServiceNow\n- `snow-flow status` - System status\n- `snow-flow swarm \"<task>\"` - Multi-agent coordination\n\n### Development Flow\n1. **Pull artifact**: `snow_pull_artifact` for local editing\n2. **Edit locally**: Use Claude's native search/edit tools\n3. **Push changes**: `snow_push_artifact` to ServiceNow\n4. **Test**: `snow_execute_script_with_output` with REAL code\n5. **Deploy**: `snow_update_set_complete` when ready\n\n## \uD83C\uDFAF Golden Rules\n\n1. **NO MOCK DATA** - Everything real, complete, production-ready\n2. **ES5 ONLY** - var, function(){}, no modern JS\n3. **VERIFY FIRST** - Test before assuming\n4. **LOCAL SYNC** - Use snow_pull_artifact for widgets\n5. **COMPLETE CODE** - No TODOs, no placeholders\n6. **TOKEN AWARE** - Use batch operations\n7. **UPDATE SETS** - Track all changes\n\n## \uD83D\uDCCA Quick Reference\n\n| Issue | Solution |\n|-------|----------|\n| Widget doesn't work | `snow_pull_artifact` \u2192 debug locally |\n| Script syntax error | ES5 only! var, function(){} |\n| Can't find table | `snow_discover_table_fields` |\n| Property missing | `snow_property_manager` |\n| Need to test | `snow_execute_script_with_output` |\n| Deployment failed | `snow_rollback_deployment` |\n\nRemember: TAKE THE TIME. DO IT RIGHT. NO MOCK DATA. NO EXCEPTIONS.";
export declare const CLAUDE_MD_TEMPLATE_VERSION = "3.6.2-CONSOLIDATED";
//# sourceMappingURL=claude-md-template.d.ts.map