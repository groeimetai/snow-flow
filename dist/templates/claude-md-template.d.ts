export declare const CLAUDE_MD_TEMPLATE = "# Snow-Flow ServiceNow Development Framework\n\n## \u26A1 QUICK START - READ THIS FIRST!\n\n| What You Want | \u274C WRONG (will fail!) | \u2705 CORRECT (works!) |\n|---------------|----------------------|---------------------|\n| Create UI Page | `node dist/index.js mcp execute ...` | `await snow_create_ui_page({...})` |\n| Create Workspace | `npx snow-flow-mcp-client ...` | `await snow_create_complete_workspace({...})` |\n| Query Incidents | `snow-flow mcp execute ...` | `await snow_query_incidents({...})` |\n| Any MCP Tool | Bash/CLI commands | Direct function call |\n\n**\uD83C\uDFAF MCP tools are JavaScript functions - call them directly! NO bash/node/npx needed!**\n\n---\n\n## \uD83D\uDEA8 CRITICAL: HOW MCP TOOLS WORK IN OPENCODE\n\n**MCP tools are AUTOMATICALLY AVAILABLE - NO bash/npx/node needed!**\n\n```javascript\n// \u2705 CORRECT - MCP tools are available directly:\nawait snow_create_ui_page({\n  name: \"incident_dashboard\",\n  html: \"<div>...</div>\"\n});\n\nawait snow_create_complete_workspace({\n  workspace_name: \"IT Support\",\n  tables: [\"incident\", \"task\"]\n});\n```\n\n## \uD83D\uDEAB FORBIDDEN BASH PATTERNS - NEVER DO THIS!\n\n**\u274C THESE COMMANDS DO NOT EXIST AND WILL ALWAYS FAIL:**\n\n```bash\n# \u274C WRONG - This file does NOT exist in user's project!\nnode dist/index.js mcp execute --server \"servicenow-platform-dev\" --tool \"snow_create_ui_page\"\n# ERROR: Cannot find module 'dist/index.js'\n\n# \u274C WRONG - This package does NOT exist!\nnpx snow-flow-mcp-client servicenow-unified snow_create_ui_page {...}\n# ERROR: 404 Not Found\n\n# \u274C WRONG - MCP tools are NOT CLI commands!\nsnow-flow mcp execute --tool snow_create_ui_page\n# ERROR: No such command\n\n# \u274C WRONG - You cannot \"run\" MCP tools via bash!\ncd project && node snow_create_ui_page.js\n# ERROR: Wrong approach entirely!\n```\n\n**\uD83D\uDEA8 WHY THESE FAIL:**\n- MCP tools are **functions**, NOT CLI commands\n- They are loaded by OpenCode/Claude Code automatically\n- No `dist/` directory exists in user's project\n- No CLI wrapper exists for MCP tools\n\n**\u2705 CORRECT WAY (the ONLY way that works):**\n\n```javascript\n// Just call the function directly - it's already available!\nconst result = await snow_create_ui_page({\n  name: \"incident_management\",\n  title: \"Incident Management\",\n  html: \"...\",\n  processing_script: \"...\"\n});\n```\n\n**\uD83C\uDFAF KEY RULE:**\n**IF you think you need bash/node/npx to call an MCP tool, you are WRONG! MCP tools are JavaScript functions - call them directly!**\n\n## \uD83D\uDEA8 ABSOLUTE RULES - NO EXCEPTIONS\n\n### \uD83D\uDD34 RULE #0: MCP TOOLS FIRST - NEVER USE LOCAL APPROACHES!\n\n**\u274C WRONG APPROACH (FORBIDDEN):**\n- Writing local scripts to \"test something first\"\n- Using background scripts for complex operations instead of MCP tools\n- Creating files locally \"to prepare before deployment\"\n- Building things locally then deploying to ServiceNow\n- Using generic queries when specific MCP tools exist\n\n**\u2705 CORRECT APPROACH (MANDATORY):**\n- **ALWAYS search for MCP tools FIRST** before doing anything\n- **Use dedicated MCP tools** for every ServiceNow operation\n- **Create directly in ServiceNow** via MCP tools, never locally first\n- **Dedicated tool > Background script** ALWAYS\n\n**Examples:**\n```javascript\n// \u274C WRONG: Using background script for workspace creation\nsnow_execute_background_script({\n  script: \"var gr = new GlideRecord('sys_ux_app_config')...\"\n});\n\n// \u2705 CORRECT: Use dedicated MCP tool\nsnow_create_complete_workspace({\n  workspace_name: \"IT Support Workspace\",\n  tables: [\"incident\", \"task\"]\n});\n\n// \u274C WRONG: Generic query when specific tool exists\nsnow_query_table({ table: 'sp_widget', query: 'sys_id=...' });\n\n// \u2705 CORRECT: Use dedicated widget tool\nsnow_pull_artifact({ sys_id: 'widget_sys_id' });\n```\n\n**MCP Tool Discovery Process:**\n1. **Search**: \"Does a tool exist for [task]?\" (e.g., snow_create_workspace, snow_deploy_widget)\n2. **Check category**: deployment, operations, ui-builder, workspace, automation\n3. **Use dedicated tool**: ALWAYS prefer specific tools over generic ones\n4. **Background scripts**: ONLY for verification, NEVER for development\n\n### \uD83D\uDD34 RULE #1: UPDATE SET WORKFLOW - MANDATORY FOR ALL DEVELOPMENT!\n\n**\uD83D\uDEA8 CRITICAL: EVERY development task MUST follow this workflow:**\n\n```javascript\n// STEP 1: ALWAYS create/ensure active Update Set FIRST (before ANY development)\nconst updateSet = await snow_create_update_set({\n  name: \"Feature: [Descriptive Name]\",  // e.g., \"Feature: Incident Dashboard Widget\"\n  description: \"Complete description of changes\",\n  application: \"global\"  // or specific app scope\n});\n\n// STEP 2: Ensure it's active (Snow-Flow auto-sets as current in ServiceNow!)\nawait snow_ensure_active_update_set({\n  sys_id: updateSet.sys_id\n});\n\n// STEP 3: NOW start development - all changes auto-tracked\nawait snow_deploy({\n  type: 'widget',\n  config: { name: 'incident_dashboard', ... }\n});\n\n// STEP 4: Complete Update Set when done\nawait snow_complete_update_set({\n  sys_id: updateSet.sys_id,\n  state: 'complete'\n});\n```\n\n**\u274C FORBIDDEN WORKFLOW:**\n- Starting development without creating Update Set first\n- Creating artifacts then trying to \"add them to Update Set later\"\n- Assuming changes are being tracked (they're not without active Update Set!)\n- Working across multiple Update Sets for single feature\n\n**\u2705 MANDATORY WORKFLOW:**\n1. **CREATE Update Set** (descriptive name: \"Feature: X\" or \"Fix: Y\")\n2. **ACTIVATE Update Set** (snow_ensure_active_update_set)\n3. **DEVELOP** (all changes auto-tracked in active Update Set)\n4. **COMPLETE Update Set** (mark as complete when done)\n\n**Update Set Best Practices:**\n- **One feature = One Update Set** (clear scope)\n- **Descriptive names**: \"Feature: Incident Auto-Assignment\" not \"Changes\"\n- **Complete description**: What, why, affected tables/components\n- **Always check current**: Use snow_sync_current_update_set if unsure\n\n### \uD83D\uDD34 RULE #2: Widget Debugging MUST Use Local Sync!\n\n**When user reports ANY widget issue, ALWAYS use:**\n```\nsnow_pull_artifact({ sys_id: 'widget_sys_id' })\n```\n\n**NEVER use snow_query_table for widgets!** It will hit token limits and you can't use native tools.\n\n**Common scenarios requiring snow_pull_artifact:**\n- \"Widget skips questions\" \u2192 snow_pull_artifact\n- \"Form doesn't submit\" \u2192 snow_pull_artifact\n- \"Data not displaying\" \u2192 snow_pull_artifact\n- \"Button doesn't work\" \u2192 snow_pull_artifact\n- \"Debug this widget\" \u2192 snow_pull_artifact\n- \"Fix widget issue\" \u2192 snow_pull_artifact\n- Widget script > 1000 chars \u2192 snow_pull_artifact\n\n### Rule #3: NO MOCK DATA - EVERYTHING REAL & COMPLETE\n**FORBIDDEN:** Mock data, placeholders, TODOs, stub implementations, test values, simulations, \"this would normally...\", partial implementations.\n**REQUIRED:** Complete, production-ready, fully functional code. Take time to implement EVERYTHING properly. Real integrations, comprehensive error handling, full validation.\n\n### Rule #4: ES5 ONLY - ServiceNow Rhino Engine\n**NEVER USE:** const/let, arrow functions =>, template literals `${}`, destructuring, for...of, default parameters, classes\n**ALWAYS USE:** var, function(){}, string concatenation +, traditional for loops, typeof checks\n\n### Rule #5: VERIFY FIRST - Never Assume\nTest before claiming broken. Check resources exist. Validate configurations. Evidence-based fixes only.\n\n## \uD83D\uDD0D TOOL DISCOVERY DECISION TREE - USE THIS EVERY TIME!\n\n**Before doing ANYTHING, follow this decision tree:**\n\n### Step 1: What is the user asking for?\n\n| User Request | Task Category | Go to Step 2 |\n|--------------|---------------|--------------|\n| \"Create workspace/UI/widget/rule/etc.\" | CREATE NEW | \u2192 Create Decision |\n| \"Fix/update/modify existing X\" | UPDATE EXISTING | \u2192 Update Decision |\n| \"Debug/check/test X\" | DEBUG/VERIFY | \u2192 Debug Decision |\n| \"Show/list/find X\" | QUERY DATA | \u2192 Query Decision |\n\n### Step 2: Find the Right Tool\n\n**CREATE NEW Decision:**\n- User wants: \"Create workspace for IT agents\"\n  - Category: Workspace (UX Framework)\n  - Tool: `snow_create_complete_workspace`\n  - REMEMBER: Create Update Set FIRST!\n\n- User wants: \"Create business rule\"\n  - Category: Platform Development\n  - Tool: `snow_create_business_rule`\n  - REMEMBER: Create Update Set FIRST!\n\n- User wants: \"Create widget\"\n  - Category: Deployment\n  - Tool: `snow_deploy` (type: 'widget')\n  - REMEMBER: Create Update Set FIRST!\n\n- User wants: \"Create UI Builder page\"\n  - Category: UI Builder\n  - Tool: `snow_create_uib_page`\n  - REMEMBER: Create Update Set FIRST!\n\n**UPDATE EXISTING Decision:**\n- Updating: Widget\n  - Is it debugging? YES: `snow_pull_artifact` (local sync)\n  - Simple field update? NO: `snow_update` (type: 'widget')\n\n- Updating: Any other artifact\n  - Tool: `snow_update` or `snow_edit_artifact`\n  - REMEMBER: Ensure Update Set is active!\n\n**DEBUG/VERIFY Decision:**\n- Debugging: Widget not working\n  - ALWAYS: `snow_pull_artifact` (get all files locally)\n  - NEVER: `snow_query_table` (token limits!)\n\n- Debugging: Script/rule not working\n  - Tool: `snow_execute_script_with_output` (test the code)\n\n- Verifying: Table/field exists\n  - Tool: `snow_execute_script_with_output` (check with GlideRecord)\n\n**QUERY DATA Decision:**\n- Querying: Widget data\n  - NEVER: `snow_query_table` (use `snow_pull_artifact` instead!)\n\n- Querying: Table data (incidents, users, etc.)\n  - Tool: `snow_query_table` or specific tools (`snow_query_incidents`)\n\n- Querying: Multiple tables\n  - Tool: `snow_batch_api` (80% faster!)\n\n### Step 3: MANDATORY - Update Set Check!\n\n**\uD83D\uDEA8 BEFORE calling ANY development tool, ask yourself:**\n\n- \u2705 Did I create an Update Set? If NO: STOP! Create one first!\n- \u2705 Is the Update Set active? If NO: Call `snow_ensure_active_update_set`!\n- \u2705 Ready to develop? NOW you can call the tool!\n\n**The Update Set Mantra (repeat before EVERY development task):**\n1. CREATE Update Set (`snow_create_update_set`)\n2. ACTIVATE Update Set (`snow_ensure_active_update_set`)\n3. DEVELOP (now all changes are tracked!)\n4. COMPLETE Update Set (`snow_complete_update_set`)\n\n---\n\n## \uD83D\uDCCB MCP SERVERS & TOOLS (18 Servers, 200+ Tools)\n\n### 1. **servicenow-local-development** \uD83D\uDD27 Widget/Artifact Sync [USE THIS FOR WIDGETS!]\n```\nsnow_pull_artifact - Pull ANY artifact to local files (ALWAYS use for widgets!)\nsnow_push_artifact - Push local changes back to ServiceNow  \nsnow_cleanup_artifacts - Clean local artifact cache\nsnow_get_sync_status - Check artifact sync status\nsnow_list_local_artifacts - List all pulled artifacts\n```\n**\u26A0\uFE0F CRITICAL: For ANY widget work, use snow_pull_artifact FIRST, not snow_query_table!**\n\n### 2. **servicenow-deployment** \uD83D\uDE80 Complete Deployment System\n```\nsnow_deploy - Create NEW artifacts (widgets, flows, scripts, pages)\nsnow_update - UPDATE existing artifacts directly\nsnow_validate_deployment - Validate before deploy\nsnow_rollback_deployment - Rollback failed deployments\nsnow_preview_widget - Preview widget rendering\nsnow_widget_test - Test widget functionality\nsnow_deployment_history - View deployment history\nsnow_check_widget_coherence - Validate HTML/Client/Server communication\n```\n\n### 3. **servicenow-operations** \uD83D\uDCCA Core Operations\n```\nsnow_query_table - Universal table query (NOT for widgets - use snow_pull_artifact!)\nsnow_query_incidents - Query and analyze incidents\nsnow_analyze_incident - AI-powered incident analysis\nsnow_auto_resolve_incident - Automated resolution\nsnow_cmdb_search - Configuration database search\nsnow_user_lookup - Find users and groups\nsnow_operational_metrics - Performance metrics\nsnow_knowledge_search - Search knowledge base\nsnow_catalog_item_manager - Manage service catalog\n```\n\n### 4. **servicenow-automation** \u2699\uFE0F Scripts & Automation\n```\nsnow_execute_background_script - Run ES5 scripts (autoConfirm available)\nsnow_execute_script_with_output - Execute with output capture\nsnow_execute_script_sync - Synchronous execution\nsnow_get_script_output - Retrieve script results\nsnow_schedule_job - Create scheduled jobs\nsnow_create_event - Trigger system events\nsnow_get_logs - Access system logs\nsnow_test_rest_connection - Test REST endpoints\nsnow_trace_execution - Performance tracing\n```\n\n### 5. **servicenow-platform-development** \uD83C\uDFD7\uFE0F Development Artifacts\n```\nsnow_create_ui_page - Create UI pages\nsnow_create_script_include - Reusable scripts\nsnow_create_business_rule - Business rules\nsnow_create_client_script - Client-side scripts\nsnow_create_ui_policy - UI policies\nsnow_create_ui_action - UI actions\nsnow_create_acl - Access controls\nsnow_create_ui_macro - UI macros\n```\n\n### 6. **servicenow-integration** \uD83D\uDD0C Integrations\n```\nsnow_create_rest_message - REST integrations\nsnow_create_soap_message - SOAP integrations\nsnow_create_transform_map - Data transformation\nsnow_create_import_set - Import management\nsnow_test_web_service - Test services\nsnow_configure_email - Email configuration\nsnow_create_data_source - Data sources\n```\n\n### 7. **servicenow-system-properties** \u2699\uFE0F Properties\n```\nsnow_property_get - Get property value\nsnow_property_set - Set property value\nsnow_property_list - List by pattern\nsnow_property_bulk_update - Bulk operations\nsnow_property_export/import - Export/Import JSON\nsnow_property_validate - Validate properties\n```\n\n### 8. **servicenow-update-set** \uD83D\uDCE6 Change Management [MANDATORY FOR ALL DEVELOPMENT!]\n```\nsnow_create_update_set - Create new update set (ALWAYS FIRST STEP!)\nsnow_ensure_active_update_set - Auto-create and activate (sets as current in ServiceNow!)\nsnow_sync_current_update_set - Sync Snow-Flow with user's current Update Set\nsnow_complete_update_set - Mark complete when done\nsnow_export_update_set - Export as XML for deployment\nsnow_preview_update_set - Preview changes before committing\nsnow_list_update_sets - List all update sets\nsnow_get_update_set_changes - View tracked changes\n```\n**\uD83D\uDEA8 CRITICAL:** EVERY development task MUST start with snow_create_update_set or snow_ensure_active_update_set!\n\n**Complete Workflow Example:**\n```javascript\n// 1. CREATE UPDATE SET (before ANY development!)\nconst updateSet = await snow_create_update_set({\n  name: \"Feature: Incident Auto-Assignment\",\n  description: \"Implements automatic incident assignment based on category and location\",\n  application: \"global\"\n});\n\n// 2. ENSURE IT'S ACTIVE (Snow-Flow auto-sets as current in ServiceNow!)\nawait snow_ensure_active_update_set({ sys_id: updateSet.sys_id });\n\n// 3. NOW DEVELOP (all changes auto-tracked)\nawait snow_create_business_rule({\n  name: \"Auto-assign incidents\",\n  table: \"incident\",\n  when: \"before\",\n  active: true,\n  script: \"var assignment = new IncidentAssignment(); assignment.autoAssign(current);\"\n});\n\nawait snow_deploy({\n  type: 'widget',\n  config: { name: 'assignment_dashboard', ... }\n});\n\n// 4. COMPLETE UPDATE SET\nawait snow_complete_update_set({\n  sys_id: updateSet.sys_id,\n  state: 'complete'\n});\n```\n\n### 9. **servicenow-development-assistant** \uD83E\uDD16 AI Assistant\n```\nsnow_find_artifact - Find any artifact by name/type\nsnow_edit_artifact - Edit existing artifacts\nsnow_analyze_artifact - Analyze dependencies\nsnow_comprehensive_search - Deep search all tables\nsnow_analyze_requirements - Requirement analysis\nsnow_generate_code - Pattern-based generation\nsnow_optimize_script - Performance optimization\n```\n\n### 10. **servicenow-security-compliance** \uD83D\uDEE1\uFE0F Security\n```\nsnow_create_security_policy - Security policies\nsnow_audit_compliance - SOX/GDPR/HIPAA audit\nsnow_scan_vulnerabilities - Vulnerability scan\nsnow_assess_risk - Risk assessment\nsnow_review_access_control - ACL review\nsnow_encrypt_field - Field encryption\nsnow_audit_trail_analysis - Audit analysis\n```\n\n### 11. **servicenow-reporting-analytics** \uD83D\uDCC8 Reporting\n```\nsnow_create_report - Create reports\nsnow_create_dashboard - Build dashboards\nsnow_define_kpi - Define KPIs\nsnow_schedule_report - Schedule delivery\nsnow_analyze_data_quality - Data quality\nsnow_create_pa_widget - Performance analytics\n```\n\n### 12. **servicenow-machine-learning** \uD83E\uDDE0 Native PI + Local ML\n\n**\uD83D\uDEA8 TWO COMPLETELY DIFFERENT ML APPROACHES!**\n\n**\uD83C\uDFE2 Native ServiceNow Predictive Intelligence (NEW! v7.4.0):**\n- Runs INSIDE ServiceNow (requires PI license)\n- Production-ready, auto-retrain, enterprise ML\n- Tools: snow_create_pi_solution, snow_train_pi_solution, snow_monitor_pi_training, snow_activate_pi_solution\n- **ALWAYS ask:** \"Do you have a ServiceNow Predictive Intelligence license?\"\n\n**\uD83D\uDCBB Local TensorFlow.js ML (Experimental):**\n- Runs locally on dev machine (FREE, no license)\n- Development/testing only, NOT for production\n- Tools: ml_train_incident_classifier, ml_predict_change_risk, ml_detect_anomalies\n\n**\uD83D\uDCCB Decision Matrix:**\n| User Says | Has PI License? | Recommend |\n|-----------|----------------|-----------|\n| \"Create incident predictor\" | \u2705 Yes | Native PI: snow_create_pi_solution |\n| \"Create incident predictor\" | \u274C No | Local TensorFlow.js: ml_train_incident_classifier |\n| \"Production ML solution\" | \u2705 Yes | Native PI (always) |\n| \"Production ML solution\" | \u274C No | STOP: Explain PI license required |\n| \"Test/experiment with ML\" | Either | Can use local TensorFlow.js |\n\n**\uD83D\uDEA8 CRITICAL: ALWAYS ask about PI license before recommending ML tools!**\n\n```\n# Native PI Tools (Production):\nsnow_create_pi_solution - Create PI solution definition\nsnow_train_pi_solution - Train model in ServiceNow (10-30 min)\nsnow_monitor_pi_training - Monitor training progress/metrics\nsnow_activate_pi_solution - Activate for production use\nsnow_list_pi_solutions - List all PI solutions\nml_predictive_intelligence - Make predictions (requires trained PI solution)\n\n# Local ML Tools (Dev/Testing Only):\nml_train_incident_classifier - Train LSTM classifier locally\nml_predict_change_risk - Local risk prediction\nml_detect_anomalies - Local anomaly detection\nml_forecast_incidents - Local time series forecast\nml_cluster_similar - Local similarity clustering\nml_performance_analytics - Native PA ML\n```\n\n### 13. **servicenow-change-virtualagent-pa** \uD83D\uDD04 Change & Virtual Agent\n```\nsnow_create_change_request - Change requests\nsnow_assess_change_risk - Risk assessment\nsnow_create_nlu_model - NLU models\nsnow_train_virtual_agent - Train VA\nsnow_configure_conversation - VA conversations\nsnow_analyze_pa_trends - Performance trends\n```\n\n### 14. **servicenow-cmdb-event-hr-csm-devops** \uD83C\uDFE2 Enterprise\n```\nsnow_manage_ci - Configuration items\nsnow_correlate_events - Event correlation\nsnow_manage_hr_case - HR cases\nsnow_csm_project - Customer projects\nsnow_devops_pipeline - CI/CD pipelines\nsnow_manage_cmdb_relationships - CI relationships\n```\n\n### 15. **servicenow-knowledge-catalog** \uD83D\uDCDA Knowledge & Catalog (v3.6.10 Corrected!)\n```\nsnow_create_knowledge_article - KB articles\nsnow_create_catalog_item - Catalog items\nsnow_create_catalog_variable - Variable sets\nsnow_create_catalog_ui_policy - CORRECTED: Creates in 2 tables (conditions as string, actions as records)\nsnow_order_catalog_item - Order catalog items\nsnow_discover_catalogs - Discover available catalogs\n```\n**\u2705 Corrected UI Policy (v3.6.10):** Conditions stored as query string in catalog_conditions field. Actions created in catalog_ui_policy_action table. Based on actual ServiceNow structure!\n\n### 16. **servicenow-flow-workspace-mobile** \uD83D\uDCF1 Modern UX + UI Builder\n```\n# Flow Designer Tools\nsnow_list_flows - List Flow Designer flows\nsnow_execute_flow - Execute flows programmatically  \nsnow_get_flow_execution_status - Monitor flow status\nsnow_get_flow_execution_history - Flow execution history\nsnow_get_flow_details - Flow configuration details\nsnow_import_flow_from_xml - Import flows from XML\n\n# Agent Workspace Tools  \nsnow_create_workspace - Create agent workspace configurations\nsnow_create_workspace_tab - Add custom workspace tabs\nsnow_create_contextual_panel - Add contextual side panels\nsnow_discover_workspaces - Find all workspace configurations\n\n# Mobile App Tools\nsnow_configure_mobile_app - Configure mobile applications\nsnow_send_push_notification - Send push notifications  \nsnow_configure_offline_sync - Setup offline synchronization\n\n# \uD83C\uDD95 COMPLETE UI BUILDER INTEGRATION (15 NEW TOOLS!)\n# Page Management (sys_ux_page)\nsnow_create_uib_page - Create UI Builder pages with routing\nsnow_update_uib_page - Update page configuration\nsnow_delete_uib_page - Delete pages with dependency validation\nsnow_discover_uib_pages - Find all UI Builder pages\n\n# Component Library (sys_ux_lib_*)  \nsnow_create_uib_component - Create custom UI components\nsnow_update_uib_component - Update component source & schema\nsnow_discover_uib_components - Browse component library\nsnow_clone_uib_component - Clone & modify existing components\n\n# Data Integration (sys_ux_data_broker)\nsnow_create_uib_data_broker - Connect ServiceNow data sources\nsnow_configure_uib_data_broker - Update queries & caching\n\n# Layout Management (sys_ux_page_element)\nsnow_add_uib_page_element - Add components to pages\nsnow_update_uib_page_element - Update component properties\nsnow_remove_uib_page_element - Remove elements with validation\n\n# Advanced UI Builder Features\nsnow_create_uib_page_registry - Configure URL routing\nsnow_discover_uib_routes - Find all page routes\nsnow_create_uib_client_script - Add client-side scripts\nsnow_create_uib_client_state - Manage page state  \nsnow_create_uib_event - Create custom events\nsnow_analyze_uib_page_performance - Performance analysis\nsnow_validate_uib_page_structure - Structure validation\nsnow_discover_uib_page_usage - Usage analytics\n```\n\n### 17. **servicenow-advanced-features** \uD83C\uDFAF Advanced\n```\nsnow_performance_optimization - Optimize instance\nsnow_batch_operations - Bulk processing\nsnow_instance_scan - Health check\nsnow_dependency_analysis - Dependencies\nsnow_code_search - Search all code\n```\n\n### 18. **snow-flow** \uD83C\uDF9B\uFE0F Orchestration\n```\nswarm_init - Initialize agent swarms\nagent_spawn - Create specialized agents\ntask_orchestrate - Complex task coordination\nmemory_search - Search persistent memory\nneural_train - Train neural networks\n```\n\n## \uD83D\uDD04 Critical Workflows - Quick Reference\n\n### Widget Work: ALWAYS Local Sync!\n```javascript\n// \u2705 CORRECT\nawait snow_pull_artifact({ sys_id: 'widget_sys_id' });\n// ... edit locally ...\nawait snow_push_artifact({ sys_id: 'widget_sys_id' });\n\n// \u274C WRONG - Token limits!\nawait snow_query_table({ table: 'sp_widget', ... });\n```\n\n### Development: ALWAYS Update Set First!\n```javascript\n// \u2705 CORRECT - Update Set workflow\nconst updateSet = await snow_create_update_set({ name: \"Feature: X\" });\nawait snow_ensure_active_update_set({ sys_id: updateSet.sys_id });\n// ... develop ...\nawait snow_complete_update_set({ sys_id: updateSet.sys_id });\n\n// \u274C WRONG - No Update Set tracking!\nawait snow_create_business_rule({ ... }); // Changes NOT tracked!\n```\n\n### Verification: Use Scripts for Testing Only\n```javascript\n// \u2705 For verification/testing\nawait snow_execute_script_with_output({\n  script: `var gr = new GlideRecord('incident'); gs.info('Exists: ' + gr.isValid());`\n});\n\n// \u274C NOT for development!\nawait snow_execute_background_script({\n  script: `var gr = new GlideRecord('sp_widget'); gr.initialize(); ...` // WRONG!\n});\n```\n\n## \uD83D\uDEA8 THE UNIVERSAL WORKFLOW - MEMORIZE THIS!\n\n**Every task follows this pattern:**\n\n1. **\uD83D\uDCE6 UPDATE SET FIRST** - `snow_create_update_set` \u2192 `snow_ensure_active_update_set`\n2. **\uD83D\uDD0D FIND RIGHT TOOL** - Use Tool Discovery Decision Tree above\n3. **\uD83D\uDEE0\uFE0F USE MCP TOOL** - Call the dedicated tool (NEVER background scripts for development!)\n4. **\u2705 TEST/VERIFY** - Use `snow_execute_script_with_output` for verification only\n5. **\u2714\uFE0F COMPLETE UPDATE SET** - `snow_complete_update_set` when done\n\n**Special Case - Widget Debugging:**\n1. UPDATE SET FIRST\n2. `snow_pull_artifact` (get all files locally)\n3. Edit with native tools\n4. `snow_push_artifact` (push back to ServiceNow)\n5. COMPLETE UPDATE SET\n\n## \uD83C\uDFAF The 4 Absolute Rules\n\n1. **\uD83D\uDD34 UPDATE SETS ALWAYS FIRST** - No development without Update Set tracking!\n2. **\uD83D\uDD34 MCP TOOLS ONLY** - Use dedicated tools, NOT background scripts for development\n3. **\uD83D\uDD34 NO MOCK DATA** - Everything real, complete, production-ready (no TODOs, no placeholders)\n4. **\uD83D\uDD34 ES5 JAVASCRIPT ONLY** - var, function(){}, string concatenation (ServiceNow Rhino engine)\n\n## \uD83D\uDCCA Quick Troubleshooting\n\n| Problem | Solution |\n|---------|----------|\n| Widget doesn't work | `snow_pull_artifact` + debug locally |\n| Forgot Update Set | `snow_create_update_set` \u2192 `snow_ensure_active_update_set` |\n| Syntax error in script | Check ES5! No const/let/arrows/template literals |\n| Widget too large | Use `snow_pull_artifact`, NOT `snow_query_table` |\n| Need to test code | `snow_execute_script_with_output` (verification only!) |\n\n---\n\n**\uD83D\uDEA8 FINAL REMINDER: Update Sets are MANDATORY. MCP Tools are AUTOMATICALLY available. NO Mock Data. ES5 Only.**";
export declare const CLAUDE_MD_TEMPLATE_VERSION = "8.1.6-ANTI-BASH";
//# sourceMappingURL=claude-md-template.d.ts.map