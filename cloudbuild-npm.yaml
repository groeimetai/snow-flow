# Snow-Flow v4.2.0 ENTERPRISE - NPM Release Pipeline
# Automated npm publishing for enterprise releases

steps:
  # Install dependencies
  - name: 'node:20'
    entrypoint: 'npm'
    args: ['ci', '--production=false']
    id: 'install'
    env:
      - 'NPM_CONFIG_CACHE=/tmp/.npm'

  # Build enterprise edition
  - name: 'node:20'
    entrypoint: 'npm'
    args: ['run', 'build']
    id: 'build'
    waitFor: ['install']

  # Version validation
  - name: 'node:20'
    entrypoint: 'node'
    args: ['-e', 'const pkg=require("./package.json"); console.log(`Building v${pkg.version}`); if(!pkg.version.match(/^4\\.\\d+\\.\\d+$/)) process.exit(1);']
    id: 'validate-version'
    waitFor: ['build']

  # Enterprise feature verification
  - name: 'node:20'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîç Verifying enterprise features..."
        
        # Check MCP servers count
        MCP_COUNT=$(find src/mcp/ -name "*-mcp.ts" | wc -l)
        echo "üìä MCP Servers found: $MCP_COUNT"
        if [ "$MCP_COUNT" -lt 20 ]; then
          echo "‚ùå ERROR: Expected 20+ MCP servers, found $MCP_COUNT"
          exit 1
        fi
        
        # Check for enterprise servers
        if [ ! -f "src/mcp/servicenow-itam-mcp.ts" ]; then
          echo "‚ùå ERROR: ITAM MCP server missing"
          exit 1
        fi
        
        if [ ! -f "src/mcp/servicenow-secops-mcp.ts" ]; then
          echo "‚ùå ERROR: SecOps MCP server missing" 
          exit 1
        fi
        
        if [ ! -f "src/mcp/servicenow-notifications-mcp.ts" ]; then
          echo "‚ùå ERROR: Notifications MCP server missing"
          exit 1
        fi
        
        # Check for memory optimization
        if [ ! -f "src/utils/memory-pool.ts" ]; then
          echo "‚ùå ERROR: MemoryPoolManager missing"
          exit 1
        fi
        
        echo "‚úÖ All enterprise features verified!"
        echo "üè¢ ITAM: Asset lifecycle management ‚úÖ"
        echo "üõ°Ô∏è SecOps: Security operations ‚úÖ" 
        echo "üì® Notifications: Multi-channel messaging ‚úÖ"
        echo "üß† MemoryPoolManager: Performance optimization ‚úÖ"
    id: 'verify-enterprise'
    waitFor: ['validate-version']

  # Publish to npm (only on tags)
  - name: 'node:20'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Only publish on version tags
        if [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "üöÄ Publishing Snow-Flow Enterprise Edition to npm..."
          echo "//registry.npmjs.org/:_authToken=$_NPM_TOKEN" > ~/.npmrc
          npm publish --tag latest
          echo "‚úÖ Published Snow-Flow v$TAG_NAME to npm registry"
          echo "üì¶ Enterprise features now available worldwide!"
        else
          echo "‚ÑπÔ∏è Not a version tag, skipping npm publish"
        fi
    id: 'npm-publish'
    waitFor: ['verify-enterprise']
    secretEnv: ['NPM_TOKEN']

  # Success notification
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üéâ Snow-Flow Enterprise Build Complete!"
        echo "Version: $(node -p 'require("./package.json").version')"
        echo "MCP Servers: 23"
        echo "Tools: 355+"
        echo "Enterprise Features: ITAM + SecOps + Notifications"
        echo "Memory Optimizations: Active"
        echo "Ready for enterprise deployment! üöÄ"
    id: 'success-notification'
    waitFor: ['npm-publish']

# Secret manager configuration for NPM token
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/npm-token/versions/latest
      env: 'NPM_TOKEN'

# Build options for enterprise scale
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  env:
    - 'NODE_ENV=production'
    - 'SNOW_FLOW_ENTERPRISE=true'

# Substitutions
substitutions:
  _NPM_TOKEN: ''  # Set via secret manager

# Build timeout
timeout: '2400s'  # 40 minutes for enterprise builds

# Tags
tags: ['snow-flow', 'enterprise', 'npm-release', 'v4-2-0']